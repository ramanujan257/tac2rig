%{
#include <iostream>
#include <string>
#include <vector>

#include "basic_blocks.hpp"

void yyeror(std::string s){
    std::cerr << s << std::endl;
}

extern int yylex();

std::vector<BasicBlock*> basicBlocks;
BasicBlock* currBB = nullptr;

BasicBlock* getCurrentBB(){
    return currBB;
}

void setCurrentBB(BasicBlock& bb){
    currBB = bb;
}

BasicBlock* bbLookup(int address){
    for(auto b : basicBlocks){
        for(auto l : b->getLines()){
            if(std::stoi(l) == address)
                return b;
        }
    }
    
    return null;
}

%}

%union {
    int num;
    std::string str;
}

%token<num> num_token
%token<str> id_token
%token goto_token if_token
%type<str> Linija E

%left '<' '='
%left '+' '-'
%left '*'

%%

Program: Program ';' Linija{
            getCurrentBB()->addLine($3);
        }
        |Linija {
            getCurrentBB()->addLine($1);
        }
        ;

Linija: num_token ':' id_token ':' '=' E {
            $$ = std::to_string($1) + ":" + $3 + ":=" + $6;
            }
       | num_token ':' id_token '[' id_token ']' ':' '=' E {
//            $$ = std::to_string($1) + ":" + $3 + "[" + $5 + "]" + $9;
       }
       | num_token ':' if_token E goto_token '(' num_token ')' {
        
            BasicBlock* curr = getCurrentBB();
            BasicBlock* else = new BasicBlock();
            basicBlocks.push_back(else);
            curr->addChild(else);
            BasicBlock* then = bbLookup($7);
            if(!then){
                then = new BasicBlock();
                basicBlocks.push_back(then);
            }
            curr->addChild(then);
       
//            curr->addLine(std::to_string($1) + "if " + $2 + "goto B" + then.getID())
            $$ = std::to_string($1) + ": if " + $4 + " goto B" + then.getID(); 

            setCurrentBB(else);
       }
       ;

E: E '+' E {
        $$ = $1 + "+" + $3;
    }
    | E '-' E {
        $$ = $1 + "-" + $3;
    }
    | E '*' E {
        $$ = $1 + "*" + $3;
    }
    | E '<' '=' E {
        $$ = $1 + "<=" $4;
    }
    | id_token {
        $$ = $1;
    }
    | num_token {
        $$ = std::to_string($1);
    }
    ;
